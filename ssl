import javax.net.ssl.*;

public class Utils {
    public static SSLSocketFactory getSslSocketFactory(String certPath, String keyPath) throws Exception {
        KeyManagerFactory keyManagerFactory = KeyManagerFactory.getInstance(KeyManagerFactory.getDefaultAlgorithm());
        KeyStore keyStore = KeyStore.getInstance("PKCS12");

        char[] password = "your_password".toCharArray(); // Replace with your actual password

        keyStore.load(Utils.class.getResourceAsStream(certPath), password);
        keyManagerFactory.init(keyStore, password);

        TrustManager[] trustManagers = { new X509TrustManager() {
            public java.security.cert.X509Certificate[] getAcceptedIssuers() {
                return null;
            }
            public void checkClientTrusted(java.security.cert.X509Certificate[] certs, String authType) {
            }
            public void checkServerTrusted(java.security.cert.X509Certificate[] certs, String authType) {
            }
        } };

        SSLContext sslContext = SSLContext.getInstance("TLS");
        sslContext.init(keyManagerFactory.getKeyManagers(), trustManagers, new java.security.SecureRandom());

        return sslContext.getSocketFactory();
    }
}




import java.io.FileInputStream;
import java.security.KeyStore;
import java.security.cert.Certificate;
import javax.net.ssl.*;

public class Utils {
    public static SSLSocketFactory getSslSocketFactory(String certificatePath, String privateKeyPath, String privateKeyPassword) throws Exception {
        // Загрузка сертификата
        Certificate certificate = loadCertificate(certificatePath);

        // Загрузка приватного ключа
        PrivateKey privateKey = loadPrivateKey(privateKeyPath, privateKeyPassword);

        // Создание и инициализация хранилища ключей
        KeyStore keyStore = KeyStore.getInstance("JKS");
        keyStore.load(null, null);
        keyStore.setCertificateEntry("certificate", certificate);
        keyStore.setKeyEntry("privateKey", privateKey, privateKeyPassword.toCharArray(), new Certificate[]{certificate});

        // Создание и настройка фабрики SSL-сокетов
        KeyManagerFactory keyManagerFactory = KeyManagerFactory.getInstance(KeyManagerFactory.getDefaultAlgorithm());
        keyManagerFactory.init(keyStore, privateKeyPassword.toCharArray());

        TrustManagerFactory trustManagerFactory = TrustManagerFactory.getInstance(TrustManagerFactory.getDefaultAlgorithm());
        trustManagerFactory.init(keyStore);

        SSLContext sslContext = SSLContext.getInstance("TLS");
        sslContext.init(keyManagerFactory.getKeyManagers(), trustManagerFactory.getTrustManagers(), null);

        return sslContext.getSocketFactory();
    }

    private static Certificate loadCertificate(String certificatePath) throws Exception {
        FileInputStream inputStream = new FileInputStream(certificatePath);
        CertificateFactory certificateFactory = CertificateFactory.getInstance("X.509");
        Certificate certificate = certificateFactory.generateCertificate(inputStream);
        inputStream.close();
        return certificate;
    }

    private static PrivateKey loadPrivateKey(String privateKeyPath, String privateKeyPassword) throws Exception {
        KeyStore keyStore = KeyStore.getInstance("PKCS12");
        FileInputStream inputStream = new FileInputStream(privateKeyPath);
        keyStore.load(inputStream, privateKeyPassword.toCharArray());
        PrivateKey privateKey = (PrivateKey) keyStore.getKey(keyStore.aliases().nextElement(), privateKeyPassword.toCharArray());
        inputStream.close();
        return privateKey;
    }
}
